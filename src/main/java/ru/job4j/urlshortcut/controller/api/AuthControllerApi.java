package ru.job4j.urlshortcut.controller.api;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.ResponseEntity;
import ru.job4j.urlshortcut.dto.authentication.request.AuthRequestDto;
import ru.job4j.urlshortcut.dto.authentication.request.RegisterRequestDto;
import ru.job4j.urlshortcut.dto.authentication.response.AuthResponseDto;
import ru.job4j.urlshortcut.dto.authentication.response.RegisterResponseDto;

@Tag(name = "AuthController", description = "AuthController management APIs")
public interface AuthControllerApi {
    @Operation(
            summary = "Save a new site",
            description = """
                    Save a new site as a user of this api. 
                    The id is autogenerated by the db. 
                    The response is a dto with a new login and password
                    """,
            tags = {"site", "post"})
    @ApiResponses({
            @ApiResponse(responseCode = "200",
                    content = {@Content(schema = @Schema(implementation = RegisterResponseDto.class),
                            mediaType = "application/json")}),
            @ApiResponse(responseCode = "400", content = {@Content(schema = @Schema())})})
    public ResponseEntity<RegisterResponseDto> registerSite(RegisterRequestDto registerRequestDto);

    @Operation(
            summary = "Authenticate a site",
            description = "Authenticates a site",
            tags = {"site", "post"})
    @ApiResponses({
            @ApiResponse(responseCode = "200",
                    content = {@Content(schema = @Schema(implementation = AuthResponseDto.class),
                            mediaType = "application/json")}),
            @ApiResponse(responseCode = "400", content = {@Content(schema = @Schema())})})
    public ResponseEntity<AuthResponseDto> authenticateUser(AuthRequestDto authRequestDto);
}
